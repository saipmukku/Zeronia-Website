{"ast":null,"code":"/**\n * Anime.js - utils - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { lerp } from '../core/helpers.js';\nexport { clamp, round, snap } from '../core/helpers.js';\n\n/**\n * Rounds a number to fixed decimal places\n * @param  {Number|String} v - Value to round\n * @param  {Number} decimalLength - Number of decimal places\n * @return {String}\n */\nconst roundPad = (v, decimalLength) => (+v).toFixed(decimalLength);\n\n/**\n * Pads the start of a value with a string\n * @param  {Number} v - Value to pad\n * @param  {Number} totalLength - Target length\n * @param  {String} padString - String to pad with\n * @return {String}\n */\nconst padStart = (v, totalLength, padString) => `${v}`.padStart(totalLength, padString);\n\n/**\n * Pads the end of a value with a string\n * @param  {Number} v - Value to pad\n * @param  {Number} totalLength - Target length\n * @param  {String} padString - String to pad with\n * @return {String}\n */\nconst padEnd = (v, totalLength, padString) => `${v}`.padEnd(totalLength, padString);\n\n/**\n * Wraps a value within a range\n * @param  {Number} v - Value to wrap\n * @param  {Number} min - Minimum boundary\n * @param  {Number} max - Maximum boundary\n * @return {Number}\n */\nconst wrap = (v, min, max) => ((v - min) % (max - min) + (max - min)) % (max - min) + min;\n\n/**\n * Maps a value from one range to another\n * @param  {Number} value - Input value\n * @param  {Number} inLow - Input range minimum\n * @param  {Number} inHigh - Input range maximum\n * @param  {Number} outLow - Output range minimum\n * @param  {Number} outHigh - Output range maximum\n * @return {Number}\n */\nconst mapRange = (value, inLow, inHigh, outLow, outHigh) => outLow + (value - inLow) / (inHigh - inLow) * (outHigh - outLow);\n\n/**\n * Converts degrees to radians\n * @param  {Number} degrees - Angle in degrees\n * @return {Number}\n */\nconst degToRad = degrees => degrees * Math.PI / 180;\n\n/**\n * Converts radians to degrees\n * @param  {Number} radians - Angle in radians\n * @return {Number}\n */\nconst radToDeg = radians => radians * 180 / Math.PI;\n\n/**\n * Frame rate independent damped lerp\n * Based on: https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n *\n * @param  {Number} start - Starting value\n * @param  {Number} end - Target value\n * @param  {Number} deltaTime - Delta time in ms\n * @param  {Number} factor - Interpolation factor in the range [0, 1]\n * @return {Number} The interpolated value\n */\nconst damp = (start, end, deltaTime, factor) => {\n  return !factor ? start : factor === 1 ? end : lerp(start, end, 1 - Math.exp(-factor * deltaTime * .1));\n};\nexport { damp, degToRad, lerp, mapRange, padEnd, padStart, radToDeg, roundPad, wrap };","map":{"version":3,"names":["lerp","clamp","round","snap","roundPad","v","decimalLength","toFixed","padStart","totalLength","padString","padEnd","wrap","min","max","mapRange","value","inLow","inHigh","outLow","outHigh","degToRad","degrees","Math","PI","radToDeg","radians","damp","start","end","deltaTime","factor","exp"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/utils/number.js"],"sourcesContent":["/**\n * Anime.js - utils - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { lerp } from '../core/helpers.js';\nexport { clamp, round, snap } from '../core/helpers.js';\n\n/**\n * Rounds a number to fixed decimal places\n * @param  {Number|String} v - Value to round\n * @param  {Number} decimalLength - Number of decimal places\n * @return {String}\n */\nconst roundPad = (v, decimalLength) => (+v).toFixed(decimalLength);\n\n/**\n * Pads the start of a value with a string\n * @param  {Number} v - Value to pad\n * @param  {Number} totalLength - Target length\n * @param  {String} padString - String to pad with\n * @return {String}\n */\nconst padStart = (v, totalLength, padString) => `${v}`.padStart(totalLength, padString);\n\n/**\n * Pads the end of a value with a string\n * @param  {Number} v - Value to pad\n * @param  {Number} totalLength - Target length\n * @param  {String} padString - String to pad with\n * @return {String}\n */\nconst padEnd = (v, totalLength, padString) => `${v}`.padEnd(totalLength, padString);\n\n/**\n * Wraps a value within a range\n * @param  {Number} v - Value to wrap\n * @param  {Number} min - Minimum boundary\n * @param  {Number} max - Maximum boundary\n * @return {Number}\n */\nconst wrap = (v, min, max) => (((v - min) % (max - min) + (max - min)) % (max - min)) + min;\n\n/**\n * Maps a value from one range to another\n * @param  {Number} value - Input value\n * @param  {Number} inLow - Input range minimum\n * @param  {Number} inHigh - Input range maximum\n * @param  {Number} outLow - Output range minimum\n * @param  {Number} outHigh - Output range maximum\n * @return {Number}\n */\nconst mapRange = (value, inLow, inHigh, outLow, outHigh) => outLow + ((value - inLow) / (inHigh - inLow)) * (outHigh - outLow);\n\n/**\n * Converts degrees to radians\n * @param  {Number} degrees - Angle in degrees\n * @return {Number}\n */\nconst degToRad = degrees => degrees * Math.PI / 180;\n\n/**\n * Converts radians to degrees\n * @param  {Number} radians - Angle in radians\n * @return {Number}\n */\nconst radToDeg = radians => radians * 180 / Math.PI;\n\n/**\n * Frame rate independent damped lerp\n * Based on: https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n *\n * @param  {Number} start - Starting value\n * @param  {Number} end - Target value\n * @param  {Number} deltaTime - Delta time in ms\n * @param  {Number} factor - Interpolation factor in the range [0, 1]\n * @return {Number} The interpolated value\n */\nconst damp = (start, end, deltaTime, factor) => {\n  return !factor ? start : factor === 1 ? end : lerp(start, end, 1 - Math.exp(-factor * deltaTime * .1));\n};\n\nexport { damp, degToRad, lerp, mapRange, padEnd, padStart, radToDeg, roundPad, wrap };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,QAAQ,oBAAoB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGA,CAACC,CAAC,EAAEC,aAAa,KAAK,CAAC,CAACD,CAAC,EAAEE,OAAO,CAACD,aAAa,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAGA,CAACH,CAAC,EAAEI,WAAW,EAAEC,SAAS,KAAK,GAAGL,CAAC,EAAE,CAACG,QAAQ,CAACC,WAAW,EAAEC,SAAS,CAAC;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGA,CAACN,CAAC,EAAEI,WAAW,EAAEC,SAAS,KAAK,GAAGL,CAAC,EAAE,CAACM,MAAM,CAACF,WAAW,EAAEC,SAAS,CAAC;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,IAAI,GAAGA,CAACP,CAAC,EAAEQ,GAAG,EAAEC,GAAG,KAAM,CAAC,CAACT,CAAC,GAAGQ,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC,IAAIC,GAAG,GAAGD,GAAG,CAAC,KAAKC,GAAG,GAAGD,GAAG,CAAC,GAAIA,GAAG;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,KAAKD,MAAM,GAAI,CAACH,KAAK,GAAGC,KAAK,KAAKC,MAAM,GAAGD,KAAK,CAAC,IAAKG,OAAO,GAAGD,MAAM,CAAC;;AAE9H;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAGC,OAAO,IAAIA,OAAO,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;;AAEnD;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGC,OAAO,IAAIA,OAAO,GAAG,GAAG,GAAGH,IAAI,CAACC,EAAE;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,IAAI,GAAGA,CAACC,KAAK,EAAEC,GAAG,EAAEC,SAAS,EAAEC,MAAM,KAAK;EAC9C,OAAO,CAACA,MAAM,GAAGH,KAAK,GAAGG,MAAM,KAAK,CAAC,GAAGF,GAAG,GAAG7B,IAAI,CAAC4B,KAAK,EAAEC,GAAG,EAAE,CAAC,GAAGN,IAAI,CAACS,GAAG,CAAC,CAACD,MAAM,GAAGD,SAAS,GAAG,EAAE,CAAC,CAAC;AACxG,CAAC;AAED,SAASH,IAAI,EAAEN,QAAQ,EAAErB,IAAI,EAAEe,QAAQ,EAAEJ,MAAM,EAAEH,QAAQ,EAAEiB,QAAQ,EAAErB,QAAQ,EAAEQ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}