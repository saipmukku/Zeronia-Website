{"ast":null,"code":"/**\n * Anime.js - svg - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { isSvgSymbol } from '../core/consts.js';\nimport { atan2, PI } from '../core/helpers.js';\nimport { getPath } from './helpers.js';\n\n/**\n * @import {\n *   TargetsParam,\n *   FunctionValue,\n *   TweenObjectValue,\n *   TweenModifier,\n * } from '../types/index.js'\n*/\n\n// Motion path animation\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {Number} totalLength\n * @param {Number} progress\n * @param {Number} lookup\n * @param {Boolean} shouldClamp\n * @return {DOMPoint}\n */\nconst getPathPoint = ($path, totalLength, progress, lookup, shouldClamp) => {\n  const point = progress + lookup;\n  const pointOnPath = shouldClamp ? Math.max(0, Math.min(point, totalLength)) // Clamp between 0 and totalLength\n  : (point % totalLength + totalLength) % totalLength; // Wrap around\n  return $path.getPointAtLength(pointOnPath);\n};\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {String} pathProperty\n * @param {Number} [offset=0]\n * @return {FunctionValue}\n */\nconst getPathProgess = ($path, pathProperty, offset = 0) => {\n  return $el => {\n    const totalLength = +$path.getTotalLength();\n    const inSvg = $el[isSvgSymbol];\n    const ctm = $path.getCTM();\n    const shouldClamp = offset === 0;\n    /** @type {TweenObjectValue} */\n    return {\n      from: 0,\n      to: totalLength,\n      /** @type {TweenModifier} */\n      modifier: progress => {\n        const offsetLength = offset * totalLength;\n        const newProgress = progress + offsetLength;\n        if (pathProperty === 'a') {\n          const p0 = getPathPoint($path, totalLength, newProgress, -1, shouldClamp);\n          const p1 = getPathPoint($path, totalLength, newProgress, 1, shouldClamp);\n          return atan2(p1.y - p0.y, p1.x - p0.x) * 180 / PI;\n        } else {\n          const p = getPathPoint($path, totalLength, newProgress, 0, shouldClamp);\n          return pathProperty === 'x' ? inSvg || !ctm ? p.x : p.x * ctm.a + p.y * ctm.c + ctm.e : inSvg || !ctm ? p.y : p.x * ctm.b + p.y * ctm.d + ctm.f;\n        }\n      }\n    };\n  };\n};\n\n/**\n * @param {TargetsParam} path\n * @param {Number} [offset=0]\n */\nconst createMotionPath = (path, offset = 0) => {\n  const $path = getPath(path);\n  if (!$path) return;\n  return {\n    translateX: getPathProgess($path, 'x', offset),\n    translateY: getPathProgess($path, 'y', offset),\n    rotate: getPathProgess($path, 'a', offset)\n  };\n};\nexport { createMotionPath };","map":{"version":3,"names":["isSvgSymbol","atan2","PI","getPath","getPathPoint","$path","totalLength","progress","lookup","shouldClamp","point","pointOnPath","Math","max","min","getPointAtLength","getPathProgess","pathProperty","offset","$el","getTotalLength","inSvg","ctm","getCTM","from","to","modifier","offsetLength","newProgress","p0","p1","y","x","p","a","c","e","b","d","f","createMotionPath","path","translateX","translateY","rotate"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/svg/motionpath.js"],"sourcesContent":["/**\n * Anime.js - svg - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { isSvgSymbol } from '../core/consts.js';\nimport { atan2, PI } from '../core/helpers.js';\nimport { getPath } from './helpers.js';\n\n/**\n * @import {\n *   TargetsParam,\n *   FunctionValue,\n *   TweenObjectValue,\n *   TweenModifier,\n * } from '../types/index.js'\n*/\n\n// Motion path animation\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {Number} totalLength\n * @param {Number} progress\n * @param {Number} lookup\n * @param {Boolean} shouldClamp\n * @return {DOMPoint}\n */\nconst getPathPoint = ($path, totalLength, progress, lookup, shouldClamp) => {\n  const point = progress + lookup;\n  const pointOnPath = shouldClamp\n    ? Math.max(0, Math.min(point, totalLength)) // Clamp between 0 and totalLength\n    : (point % totalLength + totalLength) % totalLength; // Wrap around\n  return $path.getPointAtLength(pointOnPath);\n};\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {String} pathProperty\n * @param {Number} [offset=0]\n * @return {FunctionValue}\n */\nconst getPathProgess = ($path, pathProperty, offset = 0) => {\n  return $el => {\n    const totalLength = +($path.getTotalLength());\n    const inSvg = $el[isSvgSymbol];\n    const ctm = $path.getCTM();\n    const shouldClamp = offset === 0;\n    /** @type {TweenObjectValue} */\n    return {\n      from: 0,\n      to: totalLength,\n      /** @type {TweenModifier} */\n      modifier: progress => {\n        const offsetLength = offset * totalLength;\n        const newProgress = progress + offsetLength;\n        if (pathProperty === 'a') {\n          const p0 = getPathPoint($path, totalLength, newProgress, -1, shouldClamp);\n          const p1 = getPathPoint($path, totalLength, newProgress, 1, shouldClamp);\n          return atan2(p1.y - p0.y, p1.x - p0.x) * 180 / PI;\n        } else {\n          const p = getPathPoint($path, totalLength, newProgress, 0, shouldClamp);\n          return pathProperty === 'x' ?\n            inSvg || !ctm ? p.x : p.x * ctm.a + p.y * ctm.c + ctm.e :\n            inSvg || !ctm ? p.y : p.x * ctm.b + p.y * ctm.d + ctm.f\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {TargetsParam} path\n * @param {Number} [offset=0]\n */\nconst createMotionPath = (path, offset = 0) => {\n  const $path = getPath(path);\n  if (!$path) return;\n  return {\n    translateX: getPathProgess($path, 'x', offset),\n    translateY: getPathProgess($path, 'y', offset),\n    rotate: getPathProgess($path, 'a', offset),\n  }\n};\n\nexport { createMotionPath };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}