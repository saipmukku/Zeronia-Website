{"ast":null,"code":"/**\n * Anime.js - utils - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { unitsExecRgx, emptyString } from '../core/consts.js';\nimport { isUnd, parseNumber, isFnc, abs, floor, sqrt, round, isArr, isNum, isStr, max } from '../core/helpers.js';\nimport { parseEase } from '../easings/eases/parser.js';\nimport { parseTimelinePosition } from '../timeline/position.js';\nimport { getOriginalAnimatableValue } from '../core/values.js';\nimport { registerTargets } from '../core/targets.js';\nimport { shuffle } from './random.js';\n\n/**\n * @import {\n *   StaggerParams,\n *   StaggerFunction,\n * } from '../types/index.js'\n*/\n\n/**\n * @import {\n *   Spring,\n * } from '../easings/spring/index.js'\n*/\n\n/**\n * @overload\n * @param {Number} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<Number>}\n */\n/**\n * @overload\n * @param {String} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<String>}\n */\n/**\n * @overload\n * @param {[Number, Number]} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<Number>}\n */\n/**\n * @overload\n * @param {[String, String]} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<String>}\n */\n/**\n * @param {Number|String|[Number, Number]|[String, String]} val The staggered value or range\n * @param {StaggerParams} [params] The stagger parameters\n * @return {StaggerFunction<Number|String>}\n */\nconst stagger = (val, params = {}) => {\n  let values = [];\n  let maxValue = 0;\n  const from = params.from;\n  const reversed = params.reversed;\n  const ease = params.ease;\n  const hasEasing = !isUnd(ease);\n  const hasSpring = hasEasing && !isUnd(/** @type {Spring} */ease.ease);\n  const staggerEase = hasSpring ? /** @type {Spring} */ease.ease : hasEasing ? parseEase(ease) : null;\n  const grid = params.grid;\n  const axis = params.axis;\n  const customTotal = params.total;\n  const fromFirst = isUnd(from) || from === 0 || from === 'first';\n  const fromCenter = from === 'center';\n  const fromLast = from === 'last';\n  const fromRandom = from === 'random';\n  const isRange = isArr(val);\n  const useProp = params.use;\n  const val1 = isRange ? parseNumber(val[0]) : parseNumber(val);\n  const val2 = isRange ? parseNumber(val[1]) : 0;\n  const unitMatch = unitsExecRgx.exec((isRange ? val[1] : val) + emptyString);\n  const start = params.start || 0 + (isRange ? val1 : 0);\n  let fromIndex = fromFirst ? 0 : isNum(from) ? from : 0;\n  return (target, i, t, tl) => {\n    const [registeredTarget] = registerTargets(target);\n    const total = isUnd(customTotal) ? t : customTotal;\n    const customIndex = !isUnd(useProp) ? isFnc(useProp) ? useProp(registeredTarget, i, total) : getOriginalAnimatableValue(registeredTarget, useProp) : false;\n    const staggerIndex = isNum(customIndex) || isStr(customIndex) && isNum(+customIndex) ? +customIndex : i;\n    if (fromCenter) fromIndex = (total - 1) / 2;\n    if (fromLast) fromIndex = total - 1;\n    if (!values.length) {\n      for (let index = 0; index < total; index++) {\n        if (!grid) {\n          values.push(abs(fromIndex - index));\n        } else {\n          const fromX = !fromCenter ? fromIndex % grid[0] : (grid[0] - 1) / 2;\n          const fromY = !fromCenter ? floor(fromIndex / grid[0]) : (grid[1] - 1) / 2;\n          const toX = index % grid[0];\n          const toY = floor(index / grid[0]);\n          const distanceX = fromX - toX;\n          const distanceY = fromY - toY;\n          let value = sqrt(distanceX * distanceX + distanceY * distanceY);\n          if (axis === 'x') value = -distanceX;\n          if (axis === 'y') value = -distanceY;\n          values.push(value);\n        }\n        maxValue = max(...values);\n      }\n      if (staggerEase) values = values.map(val => staggerEase(val / maxValue) * maxValue);\n      if (reversed) values = values.map(val => axis ? val < 0 ? val * -1 : -val : abs(maxValue - val));\n      if (fromRandom) values = shuffle(values);\n    }\n    const spacing = isRange ? (val2 - val1) / maxValue : val1;\n    const offset = tl ? parseTimelinePosition(tl, isUnd(params.start) ? tl.iterationDuration : start) : (/** @type {Number} */start);\n    /** @type {String|Number} */\n    let output = offset + (spacing * round(values[staggerIndex], 2) || 0);\n    if (params.modifier) output = params.modifier(output);\n    if (unitMatch) output = `${output}${unitMatch[2]}`;\n    return output;\n  };\n};\nexport { stagger };","map":{"version":3,"names":["unitsExecRgx","emptyString","isUnd","parseNumber","isFnc","abs","floor","sqrt","round","isArr","isNum","isStr","max","parseEase","parseTimelinePosition","getOriginalAnimatableValue","registerTargets","shuffle","stagger","val","params","values","maxValue","from","reversed","ease","hasEasing","hasSpring","staggerEase","grid","axis","customTotal","total","fromFirst","fromCenter","fromLast","fromRandom","isRange","useProp","use","val1","val2","unitMatch","exec","start","fromIndex","target","i","t","tl","registeredTarget","customIndex","staggerIndex","length","index","push","fromX","fromY","toX","toY","distanceX","distanceY","value","map","spacing","offset","iterationDuration","output","modifier"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/utils/stagger.js"],"sourcesContent":["/**\n * Anime.js - utils - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { unitsExecRgx, emptyString } from '../core/consts.js';\nimport { isUnd, parseNumber, isFnc, abs, floor, sqrt, round, isArr, isNum, isStr, max } from '../core/helpers.js';\nimport { parseEase } from '../easings/eases/parser.js';\nimport { parseTimelinePosition } from '../timeline/position.js';\nimport { getOriginalAnimatableValue } from '../core/values.js';\nimport { registerTargets } from '../core/targets.js';\nimport { shuffle } from './random.js';\n\n/**\n * @import {\n *   StaggerParams,\n *   StaggerFunction,\n * } from '../types/index.js'\n*/\n\n/**\n * @import {\n *   Spring,\n * } from '../easings/spring/index.js'\n*/\n\n/**\n * @overload\n * @param {Number} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<Number>}\n */\n/**\n * @overload\n * @param {String} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<String>}\n */\n/**\n * @overload\n * @param {[Number, Number]} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<Number>}\n */\n/**\n * @overload\n * @param {[String, String]} val\n * @param {StaggerParams} [params]\n * @return {StaggerFunction<String>}\n */\n/**\n * @param {Number|String|[Number, Number]|[String, String]} val The staggered value or range\n * @param {StaggerParams} [params] The stagger parameters\n * @return {StaggerFunction<Number|String>}\n */\nconst stagger = (val, params = {}) => {\n  let values = [];\n  let maxValue = 0;\n  const from = params.from;\n  const reversed = params.reversed;\n  const ease = params.ease;\n  const hasEasing = !isUnd(ease);\n  const hasSpring = hasEasing && !isUnd(/** @type {Spring} */(ease).ease);\n  const staggerEase = hasSpring ? /** @type {Spring} */(ease).ease : hasEasing ? parseEase(ease) : null;\n  const grid = params.grid;\n  const axis = params.axis;\n  const customTotal = params.total;\n  const fromFirst = isUnd(from) || from === 0 || from === 'first';\n  const fromCenter = from === 'center';\n  const fromLast = from === 'last';\n  const fromRandom = from === 'random';\n  const isRange = isArr(val);\n  const useProp = params.use;\n  const val1 = isRange ? parseNumber(val[0]) : parseNumber(val);\n  const val2 = isRange ? parseNumber(val[1]) : 0;\n  const unitMatch = unitsExecRgx.exec((isRange ? val[1] : val) + emptyString);\n  const start = params.start || 0 + (isRange ? val1 : 0);\n  let fromIndex = fromFirst ? 0 : isNum(from) ? from : 0;\n  return (target, i, t, tl) => {\n    const [ registeredTarget ] = registerTargets(target);\n    const total = isUnd(customTotal) ? t : customTotal;\n    const customIndex = !isUnd(useProp) ? isFnc(useProp) ? useProp(registeredTarget, i, total) : getOriginalAnimatableValue(registeredTarget, useProp) : false;\n    const staggerIndex = isNum(customIndex) || isStr(customIndex) && isNum(+customIndex) ? +customIndex : i;\n    if (fromCenter) fromIndex = (total - 1) / 2;\n    if (fromLast) fromIndex = total - 1;\n    if (!values.length) {\n      for (let index = 0; index < total; index++) {\n        if (!grid) {\n          values.push(abs(fromIndex - index));\n        } else {\n          const fromX = !fromCenter ? fromIndex % grid[0] : (grid[0] - 1) / 2;\n          const fromY = !fromCenter ? floor(fromIndex / grid[0]) : (grid[1] - 1) / 2;\n          const toX = index % grid[0];\n          const toY = floor(index / grid[0]);\n          const distanceX = fromX - toX;\n          const distanceY = fromY - toY;\n          let value = sqrt(distanceX * distanceX + distanceY * distanceY);\n          if (axis === 'x') value = -distanceX;\n          if (axis === 'y') value = -distanceY;\n          values.push(value);\n        }\n        maxValue = max(...values);\n      }\n      if (staggerEase) values = values.map(val => staggerEase(val / maxValue) * maxValue);\n      if (reversed) values = values.map(val => axis ? (val < 0) ? val * -1 : -val : abs(maxValue - val));\n      if (fromRandom) values = shuffle(values);\n    }\n    const spacing = isRange ? (val2 - val1) / maxValue : val1;\n    const offset = tl ? parseTimelinePosition(tl, isUnd(params.start) ? tl.iterationDuration : start) : /** @type {Number} */(start);\n    /** @type {String|Number} */\n    let output = offset + ((spacing * round(values[staggerIndex], 2)) || 0);\n    if (params.modifier) output = params.modifier(output);\n    if (unitMatch) output = `${output}${unitMatch[2]}`;\n    return output;\n  }\n};\n\nexport { stagger };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}