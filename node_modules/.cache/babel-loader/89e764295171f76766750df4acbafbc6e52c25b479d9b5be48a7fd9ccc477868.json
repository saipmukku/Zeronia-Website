{"ast":null,"code":"/**\n * Anime.js - utils - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\n/**\n * Generate a random number between optional min and max (inclusive) and decimal precision\n *\n * @callback RandomNumberGenerator\n * @param    {Number} [min=0] - The minimum value (inclusive)\n * @param    {Number} [max=1] - The maximum value (inclusive)\n * @param    {Number} [decimalLength=0] - Number of decimal places to round to\n * @return   {Number} A random number between min and max\n */\n\n/**\n * Generates a random number between min and max (inclusive) with optional decimal precision\n *\n * @type {RandomNumberGenerator}\n */\nconst random = (min = 0, max = 1, decimalLength = 0) => {\n  const m = 10 ** decimalLength;\n  return Math.floor((Math.random() * (max - min + 1 / m) + min) * m) / m;\n};\nlet _seed = 0;\n\n/**\n * Creates a seeded pseudorandom number generator function\n *\n * @param  {Number} [seed] - The seed value for the random number generator\n * @param  {Number} [seededMin=0] - The minimum default value (inclusive) of the returned function\n * @param  {Number} [seededMax=1] - The maximum default value (inclusive) of the returned function\n * @param  {Number} [seededDecimalLength=0] - Default number of decimal places to round to of the returned function\n * @return {RandomNumberGenerator} A function to generate a random number between optional min and max (inclusive) and decimal precision\n */\nconst createSeededRandom = (seed, seededMin = 0, seededMax = 1, seededDecimalLength = 0) => {\n  let t = seed === undefined ? _seed++ : seed;\n  return (min = seededMin, max = seededMax, decimalLength = seededDecimalLength) => {\n    t += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    const m = 10 ** decimalLength;\n    return Math.floor((((t ^ t >>> 14) >>> 0) / 4294967296 * (max - min + 1 / m) + min) * m) / m;\n  };\n};\n\n/**\n * Picks a random element from an array or a string\n *\n * @template T\n * @param    {String|Array<T>} items - The array or string to pick from\n * @return   {String|T} A random element from the array or character from the string\n */\nconst randomPick = items => items[random(0, items.length - 1)];\n\n/**\n * Shuffles an array in-place using the Fisher-Yates algorithm\n * Adapted from https://bost.ocks.org/mike/shuffle/\n *\n * @param  {Array} items - The array to shuffle (will be modified in-place)\n * @return {Array} The same array reference, now shuffled\n */\nconst shuffle = items => {\n  let m = items.length,\n    t,\n    i;\n  while (m) {\n    i = random(0, --m);\n    t = items[m];\n    items[m] = items[i];\n    items[i] = t;\n  }\n  return items;\n};\nexport { createSeededRandom, random, randomPick, shuffle };","map":{"version":3,"names":["random","min","max","decimalLength","m","Math","floor","_seed","createSeededRandom","seed","seededMin","seededMax","seededDecimalLength","t","undefined","imul","randomPick","items","length","shuffle","i"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/utils/random.js"],"sourcesContent":["/**\n * Anime.js - utils - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\n/**\n * Generate a random number between optional min and max (inclusive) and decimal precision\n *\n * @callback RandomNumberGenerator\n * @param    {Number} [min=0] - The minimum value (inclusive)\n * @param    {Number} [max=1] - The maximum value (inclusive)\n * @param    {Number} [decimalLength=0] - Number of decimal places to round to\n * @return   {Number} A random number between min and max\n */\n\n/**\n * Generates a random number between min and max (inclusive) with optional decimal precision\n *\n * @type {RandomNumberGenerator}\n */\nconst random = (min = 0, max = 1, decimalLength = 0) => {\n  const m = 10 ** decimalLength;\n  return Math.floor((Math.random() * (max - min + (1 / m)) + min) * m) / m;\n};\n\nlet _seed = 0;\n\n/**\n * Creates a seeded pseudorandom number generator function\n *\n * @param  {Number} [seed] - The seed value for the random number generator\n * @param  {Number} [seededMin=0] - The minimum default value (inclusive) of the returned function\n * @param  {Number} [seededMax=1] - The maximum default value (inclusive) of the returned function\n * @param  {Number} [seededDecimalLength=0] - Default number of decimal places to round to of the returned function\n * @return {RandomNumberGenerator} A function to generate a random number between optional min and max (inclusive) and decimal precision\n */\nconst createSeededRandom = (seed, seededMin = 0, seededMax = 1, seededDecimalLength = 0) => {\n  let t = seed === undefined ? _seed++ : seed;\n  return (min = seededMin, max = seededMax, decimalLength = seededDecimalLength) => {\n    t += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    const m = 10 ** decimalLength;\n    return Math.floor(((((t ^ t >>> 14) >>> 0) / 4294967296) * (max - min + (1 / m)) + min) * m) / m;\n  }\n};\n\n/**\n * Picks a random element from an array or a string\n *\n * @template T\n * @param    {String|Array<T>} items - The array or string to pick from\n * @return   {String|T} A random element from the array or character from the string\n */\nconst randomPick = items => items[random(0, items.length - 1)];\n\n/**\n * Shuffles an array in-place using the Fisher-Yates algorithm\n * Adapted from https://bost.ocks.org/mike/shuffle/\n *\n * @param  {Array} items - The array to shuffle (will be modified in-place)\n * @return {Array} The same array reference, now shuffled\n */\nconst shuffle = items => {\n  let m = items.length, t, i;\n  while (m) { i = random(0, --m); t = items[m]; items[m] = items[i]; items[i] = t; }\n  return items;\n};\n\nexport { createSeededRandom, random, randomPick, shuffle };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAGA,CAACC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,CAAC,EAAEC,aAAa,GAAG,CAAC,KAAK;EACtD,MAAMC,CAAC,GAAG,EAAE,IAAID,aAAa;EAC7B,OAAOE,IAAI,CAACC,KAAK,CAAC,CAACD,IAAI,CAACL,MAAM,CAAC,CAAC,IAAIE,GAAG,GAAGD,GAAG,GAAI,CAAC,GAAGG,CAAE,CAAC,GAAGH,GAAG,IAAIG,CAAC,CAAC,GAAGA,CAAC;AAC1E,CAAC;AAED,IAAIG,KAAK,GAAG,CAAC;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,CAAC,EAAEC,SAAS,GAAG,CAAC,EAAEC,mBAAmB,GAAG,CAAC,KAAK;EAC1F,IAAIC,CAAC,GAAGJ,IAAI,KAAKK,SAAS,GAAGP,KAAK,EAAE,GAAGE,IAAI;EAC3C,OAAO,CAACR,GAAG,GAAGS,SAAS,EAAER,GAAG,GAAGS,SAAS,EAAER,aAAa,GAAGS,mBAAmB,KAAK;IAChFC,CAAC,IAAI,UAAU;IACfA,CAAC,GAAGR,IAAI,CAACU,IAAI,CAACF,CAAC,GAAGA,CAAC,KAAK,EAAE,EAAEA,CAAC,GAAG,CAAC,CAAC;IAClCA,CAAC,IAAIA,CAAC,GAAGR,IAAI,CAACU,IAAI,CAACF,CAAC,GAAGA,CAAC,KAAK,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC;IACvC,MAAMT,CAAC,GAAG,EAAE,IAAID,aAAa;IAC7B,OAAOE,IAAI,CAACC,KAAK,CAAC,CAAE,CAAC,CAACO,CAAC,GAAGA,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,UAAU,IAAKX,GAAG,GAAGD,GAAG,GAAI,CAAC,GAAGG,CAAE,CAAC,GAAGH,GAAG,IAAIG,CAAC,CAAC,GAAGA,CAAC;EAClG,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMY,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACjB,MAAM,CAAC,CAAC,EAAEiB,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGF,KAAK,IAAI;EACvB,IAAIb,CAAC,GAAGa,KAAK,CAACC,MAAM;IAAEL,CAAC;IAAEO,CAAC;EAC1B,OAAOhB,CAAC,EAAE;IAAEgB,CAAC,GAAGpB,MAAM,CAAC,CAAC,EAAE,EAAEI,CAAC,CAAC;IAAES,CAAC,GAAGI,KAAK,CAACb,CAAC,CAAC;IAAEa,KAAK,CAACb,CAAC,CAAC,GAAGa,KAAK,CAACG,CAAC,CAAC;IAAEH,KAAK,CAACG,CAAC,CAAC,GAAGP,CAAC;EAAE;EACjF,OAAOI,KAAK;AACd,CAAC;AAED,SAAST,kBAAkB,EAAER,MAAM,EAAEgB,UAAU,EAAEG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}