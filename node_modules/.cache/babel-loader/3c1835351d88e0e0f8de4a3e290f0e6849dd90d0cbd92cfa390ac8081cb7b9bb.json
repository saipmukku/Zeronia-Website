{"ast":null,"code":"/**\n * Anime.js - core - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { K, maxFps, minValue, tickModes } from './consts.js';\nimport { round } from './helpers.js';\n\n/**\n * @import {\n *   Tickable,\n *   Tween,\n * } from '../types/index.js'\n*/\n\n/*\n * Base class to control framerate and playback rate.\n * Inherited by Engine, Timer, Animation and Timeline.\n */\nclass Clock {\n  /** @param {Number} [initTime] */\n  constructor(initTime = 0) {\n    /** @type {Number} */\n    this.deltaTime = 0;\n    /** @type {Number} */\n    this._currentTime = initTime;\n    /** @type {Number} */\n    this._elapsedTime = initTime;\n    /** @type {Number} */\n    this._startTime = initTime;\n    /** @type {Number} */\n    this._lastTime = initTime;\n    /** @type {Number} */\n    this._scheduledTime = 0;\n    /** @type {Number} */\n    this._frameDuration = round(K / maxFps, 0);\n    /** @type {Number} */\n    this._fps = maxFps;\n    /** @type {Number} */\n    this._speed = 1;\n    /** @type {Boolean} */\n    this._hasChildren = false;\n    /** @type {Tickable|Tween} */\n    this._head = null;\n    /** @type {Tickable|Tween} */\n    this._tail = null;\n  }\n  get fps() {\n    return this._fps;\n  }\n  set fps(frameRate) {\n    const previousFrameDuration = this._frameDuration;\n    const fr = +frameRate;\n    const fps = fr < minValue ? minValue : fr;\n    const frameDuration = round(K / fps, 0);\n    this._fps = fps;\n    this._frameDuration = frameDuration;\n    this._scheduledTime += frameDuration - previousFrameDuration;\n  }\n  get speed() {\n    return this._speed;\n  }\n  set speed(playbackRate) {\n    const pbr = +playbackRate;\n    this._speed = pbr < minValue ? minValue : pbr;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {tickModes}\n   */\n  requestTick(time) {\n    const scheduledTime = this._scheduledTime;\n    const elapsedTime = this._elapsedTime;\n    this._elapsedTime += time - elapsedTime;\n    // If the elapsed time is lower than the scheduled time\n    // this means not enough time has passed to hit one frameDuration\n    // so skip that frame\n    if (elapsedTime < scheduledTime) return tickModes.NONE;\n    const frameDuration = this._frameDuration;\n    const frameDelta = elapsedTime - scheduledTime;\n    // Ensures that _scheduledTime progresses in steps of at least 1 frameDuration.\n    // Skips ahead if the actual elapsed time is higher.\n    this._scheduledTime += frameDelta < frameDuration ? frameDuration : frameDelta;\n    return tickModes.AUTO;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {Number}\n   */\n  computeDeltaTime(time) {\n    const delta = time - this._lastTime;\n    this.deltaTime = delta;\n    this._lastTime = time;\n    return delta;\n  }\n}\nexport { Clock };","map":{"version":3,"names":["K","maxFps","minValue","tickModes","round","Clock","constructor","initTime","deltaTime","_currentTime","_elapsedTime","_startTime","_lastTime","_scheduledTime","_frameDuration","_fps","_speed","_hasChildren","_head","_tail","fps","frameRate","previousFrameDuration","fr","frameDuration","speed","playbackRate","pbr","requestTick","time","scheduledTime","elapsedTime","NONE","frameDelta","AUTO","computeDeltaTime","delta"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/core/clock.js"],"sourcesContent":["/**\n * Anime.js - core - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { K, maxFps, minValue, tickModes } from './consts.js';\nimport { round } from './helpers.js';\n\n/**\n * @import {\n *   Tickable,\n *   Tween,\n * } from '../types/index.js'\n*/\n\n/*\n * Base class to control framerate and playback rate.\n * Inherited by Engine, Timer, Animation and Timeline.\n */\nclass Clock {\n\n  /** @param {Number} [initTime] */\n  constructor(initTime = 0) {\n    /** @type {Number} */\n    this.deltaTime = 0;\n    /** @type {Number} */\n    this._currentTime = initTime;\n    /** @type {Number} */\n    this._elapsedTime = initTime;\n    /** @type {Number} */\n    this._startTime = initTime;\n    /** @type {Number} */\n    this._lastTime = initTime;\n    /** @type {Number} */\n    this._scheduledTime = 0;\n    /** @type {Number} */\n    this._frameDuration = round(K / maxFps, 0);\n    /** @type {Number} */\n    this._fps = maxFps;\n    /** @type {Number} */\n    this._speed = 1;\n    /** @type {Boolean} */\n    this._hasChildren = false;\n    /** @type {Tickable|Tween} */\n    this._head = null;\n    /** @type {Tickable|Tween} */\n    this._tail = null;\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  set fps(frameRate) {\n    const previousFrameDuration = this._frameDuration;\n    const fr = +frameRate;\n    const fps = fr < minValue ? minValue : fr;\n    const frameDuration = round(K / fps, 0);\n    this._fps = fps;\n    this._frameDuration = frameDuration;\n    this._scheduledTime += frameDuration - previousFrameDuration;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(playbackRate) {\n    const pbr = +playbackRate;\n    this._speed = pbr < minValue ? minValue : pbr;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {tickModes}\n   */\n  requestTick(time) {\n    const scheduledTime = this._scheduledTime;\n    const elapsedTime = this._elapsedTime;\n    this._elapsedTime += (time - elapsedTime);\n    // If the elapsed time is lower than the scheduled time\n    // this means not enough time has passed to hit one frameDuration\n    // so skip that frame\n    if (elapsedTime < scheduledTime) return tickModes.NONE;\n    const frameDuration = this._frameDuration;\n    const frameDelta = elapsedTime - scheduledTime;\n    // Ensures that _scheduledTime progresses in steps of at least 1 frameDuration.\n    // Skips ahead if the actual elapsed time is higher.\n    this._scheduledTime += frameDelta < frameDuration ? frameDuration : frameDelta;\n    return tickModes.AUTO;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {Number}\n   */\n  computeDeltaTime(time) {\n    const delta = time - this._lastTime;\n    this.deltaTime = delta;\n    this._lastTime = time;\n    return delta;\n  }\n\n}\n\nexport { Clock };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,CAAC,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,aAAa;AAC5D,SAASC,KAAK,QAAQ,cAAc;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,KAAK,CAAC;EAEV;EACAC,WAAWA,CAACC,QAAQ,GAAG,CAAC,EAAE;IACxB;IACA,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB;IACA,IAAI,CAACC,YAAY,GAAGF,QAAQ;IAC5B;IACA,IAAI,CAACG,YAAY,GAAGH,QAAQ;IAC5B;IACA,IAAI,CAACI,UAAU,GAAGJ,QAAQ;IAC1B;IACA,IAAI,CAACK,SAAS,GAAGL,QAAQ;IACzB;IACA,IAAI,CAACM,cAAc,GAAG,CAAC;IACvB;IACA,IAAI,CAACC,cAAc,GAAGV,KAAK,CAACJ,CAAC,GAAGC,MAAM,EAAE,CAAC,CAAC;IAC1C;IACA,IAAI,CAACc,IAAI,GAAGd,MAAM;IAClB;IACA,IAAI,CAACe,MAAM,GAAG,CAAC;IACf;IACA,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB;IACA,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB;IACA,IAAI,CAACC,KAAK,GAAG,IAAI;EACnB;EAEA,IAAIC,GAAGA,CAAA,EAAG;IACR,OAAO,IAAI,CAACL,IAAI;EAClB;EAEA,IAAIK,GAAGA,CAACC,SAAS,EAAE;IACjB,MAAMC,qBAAqB,GAAG,IAAI,CAACR,cAAc;IACjD,MAAMS,EAAE,GAAG,CAACF,SAAS;IACrB,MAAMD,GAAG,GAAGG,EAAE,GAAGrB,QAAQ,GAAGA,QAAQ,GAAGqB,EAAE;IACzC,MAAMC,aAAa,GAAGpB,KAAK,CAACJ,CAAC,GAAGoB,GAAG,EAAE,CAAC,CAAC;IACvC,IAAI,CAACL,IAAI,GAAGK,GAAG;IACf,IAAI,CAACN,cAAc,GAAGU,aAAa;IACnC,IAAI,CAACX,cAAc,IAAIW,aAAa,GAAGF,qBAAqB;EAC9D;EAEA,IAAIG,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACT,MAAM;EACpB;EAEA,IAAIS,KAAKA,CAACC,YAAY,EAAE;IACtB,MAAMC,GAAG,GAAG,CAACD,YAAY;IACzB,IAAI,CAACV,MAAM,GAAGW,GAAG,GAAGzB,QAAQ,GAAGA,QAAQ,GAAGyB,GAAG;EAC/C;;EAEA;AACF;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAE;IAChB,MAAMC,aAAa,GAAG,IAAI,CAACjB,cAAc;IACzC,MAAMkB,WAAW,GAAG,IAAI,CAACrB,YAAY;IACrC,IAAI,CAACA,YAAY,IAAKmB,IAAI,GAAGE,WAAY;IACzC;IACA;IACA;IACA,IAAIA,WAAW,GAAGD,aAAa,EAAE,OAAO3B,SAAS,CAAC6B,IAAI;IACtD,MAAMR,aAAa,GAAG,IAAI,CAACV,cAAc;IACzC,MAAMmB,UAAU,GAAGF,WAAW,GAAGD,aAAa;IAC9C;IACA;IACA,IAAI,CAACjB,cAAc,IAAIoB,UAAU,GAAGT,aAAa,GAAGA,aAAa,GAAGS,UAAU;IAC9E,OAAO9B,SAAS,CAAC+B,IAAI;EACvB;;EAEA;AACF;AACA;AACA;EACEC,gBAAgBA,CAACN,IAAI,EAAE;IACrB,MAAMO,KAAK,GAAGP,IAAI,GAAG,IAAI,CAACjB,SAAS;IACnC,IAAI,CAACJ,SAAS,GAAG4B,KAAK;IACtB,IAAI,CAACxB,SAAS,GAAGiB,IAAI;IACrB,OAAOO,KAAK;EACd;AAEF;AAEA,SAAS/B,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}