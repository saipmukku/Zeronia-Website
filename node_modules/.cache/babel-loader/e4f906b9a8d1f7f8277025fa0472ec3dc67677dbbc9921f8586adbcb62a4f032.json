{"ast":null,"code":"/**\n * Anime.js - animation - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { noop, minValue, valueTypes, tickModes } from '../core/consts.js';\nimport { cloneArray } from '../core/helpers.js';\nimport { render } from '../core/render.js';\nconst additive = {\n  animation: null,\n  update: noop\n};\n\n/**\n * @import {\n *   Tween,\n *   TweenAdditiveLookups,\n * } from '../types/index.js'\n */\n\n/**\n * @typedef AdditiveAnimation\n * @property {Number} duration\n * @property {Number} _offset\n * @property {Number} _delay\n * @property {Tween} _head\n * @property {Tween} _tail\n */\n\n/**\n * @param  {TweenAdditiveLookups} lookups\n * @return {AdditiveAnimation}\n */\nconst addAdditiveAnimation = lookups => {\n  let animation = additive.animation;\n  if (!animation) {\n    animation = {\n      duration: minValue,\n      computeDeltaTime: noop,\n      _offset: 0,\n      _delay: 0,\n      _head: null,\n      _tail: null\n    };\n    additive.animation = animation;\n    additive.update = () => {\n      lookups.forEach(propertyAnimation => {\n        for (let propertyName in propertyAnimation) {\n          const tweens = propertyAnimation[propertyName];\n          const lookupTween = tweens._head;\n          if (lookupTween) {\n            const valueType = lookupTween._valueType;\n            const additiveValues = valueType === valueTypes.COMPLEX || valueType === valueTypes.COLOR ? cloneArray(lookupTween._fromNumbers) : null;\n            let additiveValue = lookupTween._fromNumber;\n            let tween = tweens._tail;\n            while (tween && tween !== lookupTween) {\n              if (additiveValues) {\n                for (let i = 0, l = tween._numbers.length; i < l; i++) additiveValues[i] += tween._numbers[i];\n              } else {\n                additiveValue += tween._number;\n              }\n              tween = tween._prevAdd;\n            }\n            lookupTween._toNumber = additiveValue;\n            lookupTween._toNumbers = additiveValues;\n          }\n        }\n      });\n      // TODO: Avoid polymorphism here, idealy the additive animation should be a regular animation with a higher priority in the render loop\n      render(animation, 1, 1, 0, tickModes.FORCE);\n    };\n  }\n  return animation;\n};\nexport { addAdditiveAnimation, additive };","map":{"version":3,"names":["noop","minValue","valueTypes","tickModes","cloneArray","render","additive","animation","update","addAdditiveAnimation","lookups","duration","computeDeltaTime","_offset","_delay","_head","_tail","forEach","propertyAnimation","propertyName","tweens","lookupTween","valueType","_valueType","additiveValues","COMPLEX","COLOR","_fromNumbers","additiveValue","_fromNumber","tween","i","l","_numbers","length","_number","_prevAdd","_toNumber","_toNumbers","FORCE"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/animation/additive.js"],"sourcesContent":["/**\n * Anime.js - animation - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { noop, minValue, valueTypes, tickModes } from '../core/consts.js';\nimport { cloneArray } from '../core/helpers.js';\nimport { render } from '../core/render.js';\n\nconst additive = {\n  animation: null,\n  update: noop,\n};\n\n/**\n * @import {\n *   Tween,\n *   TweenAdditiveLookups,\n * } from '../types/index.js'\n */\n\n/**\n * @typedef AdditiveAnimation\n * @property {Number} duration\n * @property {Number} _offset\n * @property {Number} _delay\n * @property {Tween} _head\n * @property {Tween} _tail\n */\n\n/**\n * @param  {TweenAdditiveLookups} lookups\n * @return {AdditiveAnimation}\n */\nconst addAdditiveAnimation = lookups => {\n  let animation = additive.animation;\n  if (!animation) {\n    animation = {\n      duration: minValue,\n      computeDeltaTime: noop,\n      _offset: 0,\n      _delay: 0,\n      _head: null,\n      _tail: null,\n    };\n    additive.animation = animation;\n    additive.update = () => {\n      lookups.forEach(propertyAnimation => {\n        for (let propertyName in propertyAnimation) {\n          const tweens = propertyAnimation[propertyName];\n          const lookupTween = tweens._head;\n          if (lookupTween) {\n            const valueType = lookupTween._valueType;\n            const additiveValues = valueType === valueTypes.COMPLEX || valueType === valueTypes.COLOR ? cloneArray(lookupTween._fromNumbers) : null;\n            let additiveValue = lookupTween._fromNumber;\n            let tween = tweens._tail;\n            while (tween && tween !== lookupTween) {\n              if (additiveValues) {\n                for (let i = 0, l = tween._numbers.length; i < l; i++) additiveValues[i] += tween._numbers[i];\n              } else {\n                additiveValue += tween._number;\n              }\n              tween = tween._prevAdd;\n            }\n            lookupTween._toNumber = additiveValue;\n            lookupTween._toNumbers = additiveValues;\n          }\n        }\n      });\n      // TODO: Avoid polymorphism here, idealy the additive animation should be a regular animation with a higher priority in the render loop\n      render(animation, 1, 1, 0, tickModes.FORCE);\n    };\n  }\n  return animation;\n};\n\nexport { addAdditiveAnimation, additive };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,mBAAmB;AACzE,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,MAAMC,QAAQ,GAAG;EACfC,SAAS,EAAE,IAAI;EACfC,MAAM,EAAER;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMS,oBAAoB,GAAGC,OAAO,IAAI;EACtC,IAAIH,SAAS,GAAGD,QAAQ,CAACC,SAAS;EAClC,IAAI,CAACA,SAAS,EAAE;IACdA,SAAS,GAAG;MACVI,QAAQ,EAAEV,QAAQ;MAClBW,gBAAgB,EAAEZ,IAAI;MACtBa,OAAO,EAAE,CAAC;MACVC,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE,IAAI;MACXC,KAAK,EAAE;IACT,CAAC;IACDV,QAAQ,CAACC,SAAS,GAAGA,SAAS;IAC9BD,QAAQ,CAACE,MAAM,GAAG,MAAM;MACtBE,OAAO,CAACO,OAAO,CAACC,iBAAiB,IAAI;QACnC,KAAK,IAAIC,YAAY,IAAID,iBAAiB,EAAE;UAC1C,MAAME,MAAM,GAAGF,iBAAiB,CAACC,YAAY,CAAC;UAC9C,MAAME,WAAW,GAAGD,MAAM,CAACL,KAAK;UAChC,IAAIM,WAAW,EAAE;YACf,MAAMC,SAAS,GAAGD,WAAW,CAACE,UAAU;YACxC,MAAMC,cAAc,GAAGF,SAAS,KAAKpB,UAAU,CAACuB,OAAO,IAAIH,SAAS,KAAKpB,UAAU,CAACwB,KAAK,GAAGtB,UAAU,CAACiB,WAAW,CAACM,YAAY,CAAC,GAAG,IAAI;YACvI,IAAIC,aAAa,GAAGP,WAAW,CAACQ,WAAW;YAC3C,IAAIC,KAAK,GAAGV,MAAM,CAACJ,KAAK;YACxB,OAAOc,KAAK,IAAIA,KAAK,KAAKT,WAAW,EAAE;cACrC,IAAIG,cAAc,EAAE;gBAClB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACG,QAAQ,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAEP,cAAc,CAACO,CAAC,CAAC,IAAID,KAAK,CAACG,QAAQ,CAACF,CAAC,CAAC;cAC/F,CAAC,MAAM;gBACLH,aAAa,IAAIE,KAAK,CAACK,OAAO;cAChC;cACAL,KAAK,GAAGA,KAAK,CAACM,QAAQ;YACxB;YACAf,WAAW,CAACgB,SAAS,GAAGT,aAAa;YACrCP,WAAW,CAACiB,UAAU,GAAGd,cAAc;UACzC;QACF;MACF,CAAC,CAAC;MACF;MACAnB,MAAM,CAACE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEJ,SAAS,CAACoC,KAAK,CAAC;IAC7C,CAAC;EACH;EACA,OAAOhC,SAAS;AAClB,CAAC;AAED,SAASE,oBAAoB,EAAEH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}