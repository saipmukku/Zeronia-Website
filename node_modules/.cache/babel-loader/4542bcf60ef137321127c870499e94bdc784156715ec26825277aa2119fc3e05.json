{"ast":null,"code":"/**\n * Anime.js - easings - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { K, minValue, noop } from '../../core/consts.js';\nimport { globals } from '../../core/globals.js';\nimport { isUnd, clamp, pow, PI, round, sqrt, abs, exp, cos, sin } from '../../core/helpers.js';\nimport { setValue } from '../../core/values.js';\n\n/**\n * @import {\n *   JSAnimation,\n * } from '../../animation/animation.js'\n */\n\n/**\n * @import {\n *   EasingFunction,\n *   SpringParams,\n *   Callback,\n * } from '../../types/index.js'\n*/\n\n/*\n * Spring easing solver adapted from https://webkit.org/demos/spring/spring.js\n * (c) 2016 Webkit - Apple Inc\n */\n\nconst maxSpringParamValue = K * 10;\nclass Spring {\n  /**\n   * @param {SpringParams} [parameters]\n   */\n  constructor(parameters = {}) {\n    const hasBounceOrDuration = !isUnd(parameters.bounce) || !isUnd(parameters.duration);\n    this.timeStep = .02; // Interval fed to the solver to calculate duration\n    this.restThreshold = .0005; // Values below this threshold are considered resting position\n    this.restDuration = 200; // Duration in ms used to check if the spring is resting after reaching restThreshold\n    this.maxDuration = 60000; // The maximum allowed spring duration in ms (default 1 min)\n    this.maxRestSteps = this.restDuration / this.timeStep / K; // How many steps allowed after reaching restThreshold before stopping the duration calculation\n    this.maxIterations = this.maxDuration / this.timeStep / K; // Calculate the maximum iterations allowed based on maxDuration\n    this.bn = clamp(setValue(parameters.bounce, .5), -1, 1); // The bounce percentage between -1 and 1.\n    this.pd = clamp(setValue(parameters.duration, 628), 10 * globals.timeScale, maxSpringParamValue * globals.timeScale); // The perceived duration\n    this.m = clamp(setValue(parameters.mass, 1), 1, maxSpringParamValue);\n    this.s = clamp(setValue(parameters.stiffness, 100), minValue, maxSpringParamValue);\n    this.d = clamp(setValue(parameters.damping, 10), minValue, maxSpringParamValue);\n    this.v = clamp(setValue(parameters.velocity, 0), -maxSpringParamValue, maxSpringParamValue);\n    this.w0 = 0;\n    this.zeta = 0;\n    this.wd = 0;\n    this.b = 0;\n    this.completed = false;\n    this.solverDuration = 0;\n    this.settlingDuration = 0;\n    /** @type {JSAnimation} */\n    this.parent = null;\n    /** @type {Callback<JSAnimation>} */\n    this.onComplete = parameters.onComplete || noop;\n    if (hasBounceOrDuration) this.calculateSDFromBD();\n    this.compute();\n    /** @type {EasingFunction} */\n    this.ease = t => {\n      const currentTime = t * this.settlingDuration;\n      const completed = this.completed;\n      const perceivedTime = this.pd;\n      if (currentTime >= perceivedTime && !completed) {\n        this.completed = true;\n        this.onComplete(this.parent);\n      }\n      if (currentTime < perceivedTime && completed) {\n        this.completed = false;\n      }\n      return t === 0 || t === 1 ? t : this.solve(t * this.solverDuration);\n    };\n  }\n\n  /** @type {EasingFunction} */\n  solve(time) {\n    const {\n      zeta,\n      w0,\n      wd,\n      b\n    } = this;\n    let t = time;\n    if (zeta < 1) {\n      // Underdamped\n      t = exp(-t * zeta * w0) * (1 * cos(wd * t) + b * sin(wd * t));\n    } else if (zeta === 1) {\n      // Critically damped\n      t = (1 + b * t) * exp(-t * w0);\n    } else {\n      // Overdamped\n      // Using exponential instead of cosh and sinh functions to prevent Infinity\n      // Original exp(-zeta * w0 * t) * (cosh(wd * t) + b * sinh(wd * t))\n      t = ((1 + b) * exp((-zeta * w0 + wd) * t) + (1 - b) * exp((-zeta * w0 - wd) * t)) / 2;\n    }\n    return 1 - t;\n  }\n  calculateSDFromBD() {\n    // Apple's SwiftUI perceived spring duration implementation https://developer.apple.com/videos/play/wwdc2023/10158/?time=1010\n    // Equations taken from Kevin Grajeda's article https://www.kvin.me/posts/effortless-ui-spring-animations\n    const pds = globals.timeScale === 1 ? this.pd / K : this.pd;\n    // Mass and velocity should be set to their default values\n    this.m = 1;\n    this.v = 0;\n    // Stiffness = (2π ÷ perceptualDuration)²\n    this.s = pow(2 * PI / pds, 2);\n    if (this.bn >= 0) {\n      // For bounce ≥ 0 (critically damped to underdamped)\n      // damping = ((1 - bounce) × 4π) ÷ perceptualDuration\n      this.d = (1 - this.bn) * 4 * PI / pds;\n    } else {\n      // For bounce < 0 (overdamped)\n      // damping = 4π ÷ (perceptualDuration × (1 + bounce))\n      // Note: (1 + bounce) is positive since bounce is negative\n      this.d = 4 * PI / (pds * (1 + this.bn));\n    }\n    this.s = round(clamp(this.s, minValue, maxSpringParamValue), 3);\n    this.d = round(clamp(this.d, minValue, 300), 3); // Clamping to 300 is needed to prevent insane values in the solver\n  }\n  calculateBDFromSD() {\n    // Calculate perceived duration and bounce from stiffness and damping\n    // Note: We assumes m = 1 and v = 0 for these calculations\n    const pds = 2 * PI / sqrt(this.s);\n    this.pd = pds * (globals.timeScale === 1 ? K : 1);\n    const zeta = this.d / (2 * sqrt(this.s));\n    if (zeta <= 1) {\n      // Critically damped to underdamped\n      this.bn = 1 - this.d * pds / (4 * PI);\n    } else {\n      // Overdamped\n      this.bn = 4 * PI / (this.d * pds) - 1;\n    }\n    this.bn = round(clamp(this.bn, -1, 1), 3);\n    this.pd = round(clamp(this.pd, 10 * globals.timeScale, maxSpringParamValue * globals.timeScale), 3);\n  }\n  compute() {\n    const {\n      maxRestSteps,\n      maxIterations,\n      restThreshold,\n      timeStep,\n      m,\n      d,\n      s,\n      v\n    } = this;\n    const w0 = this.w0 = clamp(sqrt(s / m), minValue, K);\n    const bouncedZeta = this.zeta = d / (2 * sqrt(s * m));\n    // Calculate wd based on damping type\n    if (bouncedZeta < 1) {\n      // Underdamped\n      this.wd = w0 * sqrt(1 - bouncedZeta * bouncedZeta);\n      this.b = (bouncedZeta * w0 + -v) / this.wd;\n    } else if (bouncedZeta === 1) {\n      // Critically damped\n      this.wd = 0;\n      this.b = -v + w0;\n    } else {\n      // Overdamped\n      this.wd = w0 * sqrt(bouncedZeta * bouncedZeta - 1);\n      this.b = (bouncedZeta * w0 + -v) / this.wd;\n    }\n    let solverTime = 0;\n    let restSteps = 0;\n    let iterations = 0;\n    while (restSteps <= maxRestSteps && iterations <= maxIterations) {\n      if (abs(1 - this.solve(solverTime)) < restThreshold) {\n        restSteps++;\n      } else {\n        restSteps = 0;\n      }\n      this.solverDuration = solverTime;\n      solverTime += timeStep;\n      iterations++;\n    }\n    this.settlingDuration = round(this.solverDuration * K, 0) * globals.timeScale;\n  }\n  get bounce() {\n    return this.bn;\n  }\n  set bounce(v) {\n    this.bn = clamp(setValue(v, 1), -1, 1);\n    this.calculateSDFromBD();\n    this.compute();\n  }\n  get duration() {\n    return this.pd;\n  }\n  set duration(v) {\n    this.pd = clamp(setValue(v, 1), 10 * globals.timeScale, maxSpringParamValue * globals.timeScale);\n    this.calculateSDFromBD();\n    this.compute();\n  }\n  get stiffness() {\n    return this.s;\n  }\n  set stiffness(v) {\n    this.s = clamp(setValue(v, 100), minValue, maxSpringParamValue);\n    this.calculateBDFromSD();\n    this.compute();\n  }\n  get damping() {\n    return this.d;\n  }\n  set damping(v) {\n    this.d = clamp(setValue(v, 10), minValue, maxSpringParamValue);\n    this.calculateBDFromSD();\n    this.compute();\n  }\n  get mass() {\n    return this.m;\n  }\n  set mass(v) {\n    this.m = clamp(setValue(v, 1), 1, maxSpringParamValue);\n    this.compute();\n  }\n  get velocity() {\n    return this.v;\n  }\n  set velocity(v) {\n    this.v = clamp(setValue(v, 0), -maxSpringParamValue, maxSpringParamValue);\n    this.compute();\n  }\n}\n\n/**\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */\nconst spring = parameters => new Spring(parameters);\n\n/**\n * @deprecated createSpring() is deprecated use spring() instead\n *\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */\nconst createSpring = parameters => {\n  console.warn('createSpring() is deprecated use spring() instead');\n  return new Spring(parameters);\n};\nexport { Spring, createSpring, spring };","map":{"version":3,"names":["K","minValue","noop","globals","isUnd","clamp","pow","PI","round","sqrt","abs","exp","cos","sin","setValue","maxSpringParamValue","Spring","constructor","parameters","hasBounceOrDuration","bounce","duration","timeStep","restThreshold","restDuration","maxDuration","maxRestSteps","maxIterations","bn","pd","timeScale","m","mass","s","stiffness","d","damping","v","velocity","w0","zeta","wd","b","completed","solverDuration","settlingDuration","parent","onComplete","calculateSDFromBD","compute","ease","t","currentTime","perceivedTime","solve","time","pds","calculateBDFromSD","bouncedZeta","solverTime","restSteps","iterations","spring","createSpring","console","warn"],"sources":["/Users/mukku/Desktop/Work and Education/Projects/zeronia.org/node_modules/animejs/dist/modules/easings/spring/index.js"],"sourcesContent":["/**\n * Anime.js - easings - ESM\n * @version v4.2.2\n * @license MIT\n * @copyright 2025 - Julian Garnier\n */\n\nimport { K, minValue, noop } from '../../core/consts.js';\nimport { globals } from '../../core/globals.js';\nimport { isUnd, clamp, pow, PI, round, sqrt, abs, exp, cos, sin } from '../../core/helpers.js';\nimport { setValue } from '../../core/values.js';\n\n/**\n * @import {\n *   JSAnimation,\n * } from '../../animation/animation.js'\n */\n\n/**\n * @import {\n *   EasingFunction,\n *   SpringParams,\n *   Callback,\n * } from '../../types/index.js'\n*/\n\n/*\n * Spring easing solver adapted from https://webkit.org/demos/spring/spring.js\n * (c) 2016 Webkit - Apple Inc\n */\n\nconst maxSpringParamValue = K * 10;\n\nclass Spring {\n  /**\n   * @param {SpringParams} [parameters]\n   */\n  constructor(parameters = {}) {\n    const hasBounceOrDuration = !isUnd(parameters.bounce) || !isUnd(parameters.duration);\n    this.timeStep = .02; // Interval fed to the solver to calculate duration\n    this.restThreshold = .0005; // Values below this threshold are considered resting position\n    this.restDuration = 200; // Duration in ms used to check if the spring is resting after reaching restThreshold\n    this.maxDuration = 60000; // The maximum allowed spring duration in ms (default 1 min)\n    this.maxRestSteps = this.restDuration / this.timeStep / K; // How many steps allowed after reaching restThreshold before stopping the duration calculation\n    this.maxIterations = this.maxDuration / this.timeStep / K; // Calculate the maximum iterations allowed based on maxDuration\n    this.bn = clamp(setValue(parameters.bounce, .5), -1, 1); // The bounce percentage between -1 and 1.\n    this.pd = clamp(setValue(parameters.duration, 628), 10 * globals.timeScale, maxSpringParamValue * globals.timeScale); // The perceived duration\n    this.m = clamp(setValue(parameters.mass, 1), 1, maxSpringParamValue);\n    this.s = clamp(setValue(parameters.stiffness, 100), minValue, maxSpringParamValue);\n    this.d = clamp(setValue(parameters.damping, 10), minValue, maxSpringParamValue);\n    this.v = clamp(setValue(parameters.velocity, 0), -maxSpringParamValue, maxSpringParamValue);\n    this.w0 = 0;\n    this.zeta = 0;\n    this.wd = 0;\n    this.b = 0;\n    this.completed = false;\n    this.solverDuration = 0;\n    this.settlingDuration = 0;\n    /** @type {JSAnimation} */\n    this.parent = null;\n    /** @type {Callback<JSAnimation>} */\n    this.onComplete = parameters.onComplete || noop;\n    if (hasBounceOrDuration) this.calculateSDFromBD();\n    this.compute();\n    /** @type {EasingFunction} */\n    this.ease = t => {\n      const currentTime = t * this.settlingDuration;\n      const completed = this.completed;\n      const perceivedTime = this.pd;\n      if (currentTime >= perceivedTime && !completed) {\n        this.completed = true;\n        this.onComplete(this.parent);\n      }\n      if (currentTime < perceivedTime && completed) {\n        this.completed = false;\n      }\n      return t === 0 || t === 1 ? t : this.solve(t * this.solverDuration);\n    };\n  }\n\n  /** @type {EasingFunction} */\n  solve(time) {\n    const { zeta, w0, wd, b } = this;\n    let t = time;\n    if (zeta < 1) {\n      // Underdamped\n      t = exp(-t * zeta * w0) * (1 * cos(wd * t) + b * sin(wd * t));\n    } else if (zeta === 1) {\n      // Critically damped\n      t = (1 + b * t) * exp(-t * w0);\n    } else {\n      // Overdamped\n      // Using exponential instead of cosh and sinh functions to prevent Infinity\n      // Original exp(-zeta * w0 * t) * (cosh(wd * t) + b * sinh(wd * t))\n      t = ((1 + b) * exp((-zeta * w0 + wd) * t) + (1 - b) * exp((-zeta * w0 - wd) * t)) / 2;\n    }\n    return 1 - t;\n  }\n\n  calculateSDFromBD() {\n    // Apple's SwiftUI perceived spring duration implementation https://developer.apple.com/videos/play/wwdc2023/10158/?time=1010\n    // Equations taken from Kevin Grajeda's article https://www.kvin.me/posts/effortless-ui-spring-animations\n    const pds = globals.timeScale === 1 ? this.pd / K : this.pd;\n    // Mass and velocity should be set to their default values\n    this.m = 1;\n    this.v = 0;\n    // Stiffness = (2π ÷ perceptualDuration)²\n    this.s = pow((2 * PI) / pds, 2);\n    if (this.bn >= 0) {\n      // For bounce ≥ 0 (critically damped to underdamped)\n      // damping = ((1 - bounce) × 4π) ÷ perceptualDuration\n      this.d = ((1 - this.bn) * 4 * PI) / pds;\n    } else {\n      // For bounce < 0 (overdamped)\n      // damping = 4π ÷ (perceptualDuration × (1 + bounce))\n      // Note: (1 + bounce) is positive since bounce is negative\n      this.d = (4 * PI) / (pds * (1 + this.bn));\n    }\n    this.s = round(clamp(this.s, minValue, maxSpringParamValue), 3);\n    this.d = round(clamp(this.d, minValue, 300), 3); // Clamping to 300 is needed to prevent insane values in the solver\n  }\n\n  calculateBDFromSD() {\n    // Calculate perceived duration and bounce from stiffness and damping\n    // Note: We assumes m = 1 and v = 0 for these calculations\n    const pds = (2 * PI) / sqrt(this.s);\n    this.pd = pds * (globals.timeScale === 1 ? K : 1);\n    const zeta = this.d / (2 * sqrt(this.s));\n    if (zeta <= 1) {\n      // Critically damped to underdamped\n      this.bn = 1 - (this.d * pds) / (4 * PI);\n    } else {\n      // Overdamped\n      this.bn = (4 * PI) / (this.d * pds) - 1;\n    }\n    this.bn = round(clamp(this.bn, -1, 1), 3);\n    this.pd = round(clamp(this.pd, 10 * globals.timeScale, maxSpringParamValue * globals.timeScale), 3);\n  }\n\n  compute() {\n    const { maxRestSteps, maxIterations, restThreshold, timeStep, m, d, s, v } = this;\n    const w0 = this.w0 = clamp(sqrt(s / m), minValue, K);\n    const bouncedZeta = this.zeta = d / (2 * sqrt(s * m));\n    // Calculate wd based on damping type\n    if (bouncedZeta < 1) {\n      // Underdamped\n      this.wd = w0 * sqrt(1 - bouncedZeta * bouncedZeta);\n      this.b = (bouncedZeta * w0 + -v) / this.wd;\n    } else if (bouncedZeta === 1) {\n      // Critically damped\n      this.wd = 0;\n      this.b = -v + w0;\n    } else {\n      // Overdamped\n      this.wd = w0 * sqrt(bouncedZeta * bouncedZeta - 1);\n      this.b = (bouncedZeta * w0 + -v) / this.wd;\n    }\n\n    let solverTime = 0;\n    let restSteps = 0;\n    let iterations = 0;\n    while (restSteps <= maxRestSteps && iterations <= maxIterations) {\n      if (abs(1 - this.solve(solverTime)) < restThreshold) {\n        restSteps++;\n      } else {\n        restSteps = 0;\n      }\n      this.solverDuration = solverTime;\n      solverTime += timeStep;\n      iterations++;\n    }\n    this.settlingDuration = round(this.solverDuration * K, 0) * globals.timeScale;\n  }\n\n  get bounce() {\n    return this.bn;\n  }\n\n  set bounce(v) {\n    this.bn = clamp(setValue(v, 1), -1, 1);\n    this.calculateSDFromBD();\n    this.compute();\n  }\n\n  get duration() {\n    return this.pd;\n  }\n\n  set duration(v) {\n    this.pd = clamp(setValue(v, 1), 10 * globals.timeScale, maxSpringParamValue * globals.timeScale);\n    this.calculateSDFromBD();\n    this.compute();\n  }\n\n  get stiffness() {\n    return this.s;\n  }\n\n  set stiffness(v) {\n    this.s = clamp(setValue(v, 100), minValue, maxSpringParamValue);\n    this.calculateBDFromSD();\n    this.compute();\n  }\n\n  get damping() {\n    return this.d;\n  }\n\n  set damping(v) {\n    this.d = clamp(setValue(v, 10), minValue, maxSpringParamValue);\n    this.calculateBDFromSD();\n    this.compute();\n  }\n\n  get mass() {\n    return this.m;\n  }\n\n  set mass(v) {\n    this.m = clamp(setValue(v, 1), 1, maxSpringParamValue);\n    this.compute();\n  }\n\n  get velocity() {\n    return this.v;\n  }\n\n  set velocity(v) {\n    this.v = clamp(setValue(v, 0), -maxSpringParamValue, maxSpringParamValue);\n    this.compute();\n  }\n}\n\n/**\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */\nconst spring = (parameters) => new Spring(parameters);\n\n/**\n * @deprecated createSpring() is deprecated use spring() instead\n *\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */\nconst createSpring = (parameters) => {\n  console.warn('createSpring() is deprecated use spring() instead');\n  return new Spring(parameters);\n};\n\nexport { Spring, createSpring, spring };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}